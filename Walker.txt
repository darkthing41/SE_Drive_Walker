//Configuration
//--------------------

static readonly MyBlockOrientation
    shipOrientation = new MyBlockOrientation
        (Base6Directions.Direction.Forward, Base6Directions.Direction.Up);

const uint
    phaseCount = 3;

const float
    rpmBase = 2.0f,
    rpmMax = 3.0f;

const float
    drivekP = (phaseCount / Pi) * rpmBase, //constant for Drive PD controllers
    drivekD = 0.0f; //constant for Drive PD controllers

//Expected block names are of the form
//<prefix> <Descriptor>

const string
    namePrefixDrive = "Rotor",      //prefix shared by all drive rotors
    nameDescriptorDriveBase = "Drive";  //name shared by all drive rotors
static readonly string[]
    nameDesciptorDriveSides = { "L", "R" }, // {Left, Right} sides
    nameDesciptorDriveIds = { "FF", "CF", "CB", "BB" };   //Ids for each rotor in the column
    //Expect Drive Descriptor of the form
    //  <DescriptorDrive> ::= <base>-<side>-<Column>-<id>
    //  <Column> ::= <integer range 1..phaseCount>
    //e.g. Front Right rotor in the innermost column
    //Rotor Drive-R-1-FF

const string
    nameBusCommand = "Bus Drive.Command";

const uint
    commandsMax = 10;    //maximum number of commands to read each run


//Definitions
//--------------------

//Opcodes for use as arguments
//-commands may be issued directly
const string
    command_Initialise = "Init";   //args: <none>

//Bus ids
static readonly string
    busIdRpmLeft = CommandBus.ExtendId("RpmLeft"),  // Left RPM := float
    busIdRpmRight = CommandBus.ExtendId("RpmRight"),// Right RPM := float
    busIdCmdStop = CommandBus.ExtendId("Stop"),     // Emergency stop
    busIdCmdHalt = CommandBus.ExtendId("Halt");     // Synchronised stop


//Utility definitions

const float
    Pi = MathHelper.Pi,
    PiByTwo = Pi * 0.5f,
    ThreePiByTwo = Pi * 1.5f,
    TwoPi = Pi * 2.0f;

const float
    phaseSize = TwoPi / phaseCount;

static float NormaliseRadians_Pi (float angle){
    if (angle < -Pi)
        return angle +TwoPi;
    if (angle >= Pi)
        return angle -TwoPi;
    return angle;
}

static float NormaliseRadians_2Pi (float angle){
    if (angle < 0.0f)
        return angle +TwoPi;
    if (angle >= TwoPi)
        return angle -TwoPi;
    return angle;
}

static float AngleAverage_2Pi(float a, float b){
    float
        angleDifference = NormaliseRadians_Pi( b - a );
    return
        NormaliseRadians_2Pi( a +(angleDifference/2.0f) );
}


static readonly Base6Directions.Direction //Unit direction vectors for ship
    shipDown = shipOrientation.TransformDirection(Base6Directions.Direction.Down),
    shipRight = shipOrientation.TransformDirection(Base6Directions.Direction.Right);

private const uint
    driveLeft = 0,
    driveRight = 1;

static readonly uint
    driveIdCount = (uint)nameDesciptorDriveIds.Length,
    driveCount = 2 * phaseCount * driveIdCount;  //Left-Right, phase, id

static string NameRotorDrive(uint indexSide, uint indexColumn, uint indexId) {
    return
        namePrefixDrive +' ' +nameDescriptorDriveBase +'-'
        +nameDesciptorDriveSides[indexSide] +'-'
        +(indexColumn +1).ToString() +'-'
        +nameDesciptorDriveIds[indexId];
}

static uint IndexDrive(uint indexSide, uint indexColumn, uint indexId) {
    return indexId + driveIdCount*( indexColumn + phaseCount*( indexSide ) );
}

//API definitions
public struct MotorStator
{   //IMyMotorStator API wrapper
    //Velocity is measured internally in RPM
    //Angle is measured internally in radians. (0-2pi for unlimited rotors)
    //PROPERTIES:
    public static void SetVelocity(IMyMotorStator motorStator, float velocity){
        motorStator.SetValue<float>("Velocity", velocity);
    }
    public static void SetLowerLimit(IMyMotorStator motorStator, float lowerLimit){
        motorStator.SetValue<float>("LowerLimit", lowerLimit);
    }
    public static void SetUpperLimit(IMyMotorStator motorStator, float upperLimit){
        motorStator.SetValue<float>("UpperLimit", upperLimit);
    }
}


//Internal Types
//--------------------

public struct CommandBus
{
    //The bus stores a series of records as a string, each ended by the terminator
    //  *It is not checked that records do not contain the terminator
    //   so make sure that you do not corrupt it by using this character

    //The Command Bus stores only one Record Type:
    //-Temporary: appended on write (duplicates allowed), destructive read (FIFO)
    //e.g. use temporary records to issue commands / directional data transfer

    //Records have an Id allowing basic discrimination
    //(e.g. source and/or destination and/or data as needed)

    //Additionally, records all have a Data Type to allow for basic type checking.
    //(new types may be easily added, so long as they can be encoded/decoded
    // from a string, and ensured not to contain the record terminator)

    //Temporary records are appended to the end of the store.
    //Interpreting the read records is down to the application.

    //FORMAT
    //<Record> ::= <RecordBody><recordTerminator>
    //<RecordBody> ::= <RecordTemporary>
    //<RecordTemporary> ::= <id><Data>
    //<id> ::= <string-lengthId>
    //<Data> ::= <DataInt> | <DataFloat> | <DataString>
    //<DataInt> ::= <dataTypeInt><int>
    //<DataFloat> ::= <dataTypeFloat><float>
    //<DataString> ::= <dataTypeFloat><string>

    //e.g. Temporary string record 'Speed' = "reset"
    //Speed__Sreset\n


    //Configuration
    public const char
        recordTerminator = '\n';//'\x1E'; //Record separator

    public const char
        dataTypeInt = 'I',
        dataTypeFloat = 'F',
        dataTypeString = 'S';

    public const int
        lengthId = 8;

    //The source of the storage
    public IMyTextPanel
        bus;

    //Internal storage interface
    private string Store{
        get { return bus.GetPrivateText(); }
        set { bus.WritePrivateText(value, false); }
    }


    //Internal Implementation
    private string
        store;
    private int
        readPos;


    //PUBLIC INTERFACE

    public CommandBus(IMyTextPanel bus){
        this.bus = bus;

        store = null;
        readPos = 0;
    }

    public static string ExtendId(string id){
        return id.PadRight(lengthId, ' ');
    }

    public void BeginRead(){
        store = Store;
        readPos = 0;
    }

    public bool ReadNext(out string id, out char dataType, out string data){
        if (readPos < store.Length)
        {
            id = store.Substring (readPos, lengthId);
            readPos += lengthId;

            dataType = store[readPos++];

            int dataPos = readPos;
            while (store[readPos++] != recordTerminator) {};
            data = store.Substring (dataPos, readPos -dataPos -1);

            return true;
        } else {
            //end of storage; no record to return
            id = null;
            dataType = '\0';
            data = null;
            return false;
        }
    }

    public void EndRead(){
        //no work required if nothing was read
        if (readPos > 0) {
            Store = store.Remove(0, readPos);
            readPos = 0;
        }
        store = null;
    }

}

public struct PD_Zero
{
    private float
        kP, kD;

    private float
        errorLast;

    public void Reset()
    {
        errorLast = 0;
    }

    public float Update(float measurement, float elapsedSeconds_reciprocal)
    {
        //calculate current error (inverted to provide negative feedback)
        float error = -measurement;

        float result =
            (kP * error)
            +(kD * ( (error -errorLast) * elapsedSeconds_reciprocal ));

        errorLast = error;

        return result;
    }

    public PD_Zero(float kP, float kD)
    {
        this.kP = kP;
        this.kD = kD;

        this.errorLast = 0;
    }

    public string Store()
    {
        return
            errorLast.ToString("R");
    }

    public bool TryRestore(string storage)
    {
        return
            float.TryParse (storage, out errorLast);
    }
}

public struct Mode
{   //Mode enum
    public const int
        Preparing = 0,
        Running = 1;
}
public struct Command
{   //Command enum
    public const int
        Stop = 0,
        Halt = 1,
        Run = 2;
}

public struct Status
{
    //program data not persistent across restarts
    public bool
        initialised;

    //command data persistent across restarts
    public float
        rpmLeft, rpmRight;

    public int
        mode;
    public int
        command;

    //status data persistent across restarts
    public PD_Zero[]
        driveControllers;


    //configuration constants
    private const char delimiter = ';';


    //Internal Implementation
    //-reuse stringbuilder to reduce Storage impact
    private StringBuilder s;


    //Operations

    public void Initialise()
    {   //data setup
        s = new StringBuilder();

        rpmLeft = 0.0f;
        rpmRight = 0.0f;

        mode = Mode.Preparing;
        command = Command.Stop;

        driveControllers = new PD_Zero[driveCount];
        for (uint i=0; i<driveCount; i++) {
            driveControllers[i] = new PD_Zero (drivekP, drivekD);
        }
    }

    public string Store()
    {
        s.Clear();

        s.Append( mode.ToString() ); s.Append(delimiter);
        s.Append( command.ToString() ); s.Append(delimiter);

        for (uint i=0; i<driveCount; i++) {
            s.Append( driveControllers[i].Store() );
            s.Append( delimiter );
        }

        s.Append( rpmLeft.ToString("R") ); s.Append(delimiter);
        s.Append( rpmRight.ToString("R") );

        return s.ToString();
    }

    public bool TryRestore(string storage)
    {
        s = new StringBuilder();

        string[] elements = storage.Split(delimiter);
        if ( !(elements.Length == 2 +driveCount +2) )
            return false;

        uint pos = 0;    //element to examine

        if ( !( int.TryParse(elements[pos++], out mode)
                && int.TryParse(elements[pos++], out command) ))
            return false;

        driveControllers = new PD_Zero[driveCount];
        for (uint i=0; i<driveCount; i++) {
            if ( ! driveControllers[i].TryRestore(elements[pos++]) )
                return false;
        }

        return
            float.TryParse (elements[pos++], out rpmLeft)
            && float.TryParse (elements[pos++], out rpmRight);
    }
}

public struct DriveConfig
{
    public IMyMotorStator
        drive;
    public bool
        inverted;
    public float
        offset; //observed angle + offset = true angle (from zero; may need inverting)

    public float
        TrueAngle {
            get {
                if (inverted) { return -(drive.Angle +offset); }
                else          { return   drive.Angle +offset; }
            }
        }

    //Operations

    public bool Evaluate()
    {
        //check whether the 'Up' side of the rotor is facing shipRight or shipLeft
        switch (drive.Orientation.TransformDirectionInverse(shipRight)) {
            case Base6Directions.Direction.Up:
                inverted = false;
                break;
            case Base6Directions.Direction.Down:
                inverted = true;
                break;
            default:
                inverted = false;
                offset = float.NaN;
                return false;
        }
        //'0' position is the rotor's 'Right', which should be facing shipDown.
        switch (drive.Orientation.TransformDirectionInverse(shipDown)) {
            case Base6Directions.Direction.Right:
                offset = 0.0f;
                break;
            case Base6Directions.Direction.Forward:
                offset = -ThreePiByTwo;
                break;
            case Base6Directions.Direction.Left:
                offset = -Pi;
                break;
            case Base6Directions.Direction.Backward:
                offset = -PiByTwo;
                break;
            default:
                offset = float.NaN;
                return false;
        }
        return true;
    }
}

//Global variables
//--------------------
CommandBus
    busCmd;

Status
    status;

DriveConfig[]
    drives = new DriveConfig[driveCount];

float[] //phases, 0..2pi
    phaseDrives = new float[driveCount],
    phaseColumns = new float[phaseCount*2], //Left-phases, Right-phases
    phaseSides = new float[2];


//Program
//--------------------

public Program()
{
    Echo ("Restarted.");

    //script has been reloaded
    //-may be first time running
    //-world may have been reloaded (or script recompiled)
    if (Storage == null) {
        //use default values
        status.Initialise();
    } else {
        //attempt to restore saved values
        //  -otherwise use defaults
        Echo ("restoring saved state...");
        if ( !status.TryRestore(Storage) ){
            Echo ("restoration failed.");
            status.Initialise();
        }
    }
    //We are not initialised after restart
    //-attempt to initialise now to reduce load at run-time
    status.initialised = false;
    Initialise();

//  Echo ("fwd: " +shipForward.ToString());
//  Echo ("up: " +shipUp.ToString());
//  Echo ("right: " + shipRight.ToString ());
}


public void Save()
{
    //Command data should be persistent across recompilation
    //-must save after each execution, so no need to save here
    //Storage = status.Store();
}


public void Main(string argument)
{
    //First ensure the system is able to process commands
    //-if necessary, perform first time setup
    //-if necessary or requested, initialise the system
    if ( !status.initialised || argument == command_Initialise) {
        //if we cannot initialise, end here
        if ( !Initialise() )
            return;
    }
    if (argument == command_Initialise) {
        Echo ("resetting.");
        status.Initialise ();
    }
    else if ( !Validate() ) {
        //if saved state is not valid, try re-initialising
        //if we cannot initialise, end here
        if ( !Initialise() )
            return;
    }

    //Read any control commands
    busCmd.BeginRead();
    ReadCommands();
    busCmd.EndRead();

    //Perform main processing
    Update ();

    //Save status back
    Storage = status.Store();
}


private bool ParseRpm(string s, ref float target ){
    float rpm;
    if (float.TryParse (s, out rpm)) {
        if ( (rpm >= -rpmBase) && (rpm <= rpmBase) ) {
            target = rpm;
            return true;
        } else {
            Echo ("WARNING: RPM value out of bounds \"" +s +"\"");
            return false;
        }
    } else {
        Echo ("WARNING: Invalid RPM value \"" +s +"\"");
        return false;
    }
}

private void ReadCommands()
{
    string
        id, data;
    char
        dataType;

    //Read commands until there are none left, or hit max
    for (int i=0; i<commandsMax; i++) {
        if (busCmd.ReadNext (out id, out dataType, out data)) {
            switch (dataType) {
                case CommandBus.dataTypeString:

                    break;

                case CommandBus.dataTypeFloat:
                    if (id == busIdRpmLeft) {
                        if (ParseRpm (data, ref status.rpmLeft)) {
                            Echo ("Left RPM set.");
                        }
                    } else if (id == busIdRpmRight) {
                        if (ParseRpm (data, ref status.rpmRight)) {
                            Echo ("Right RPM set.");
                        }
                    } else {
                        break;
                    }
                    continue;

                default:
                    break;
            }
            //If we exited without 'continue', the command was unrecognised.
            Echo ("WARNING: Unrecognised command \"" +id +"\" type '" +dataType +"'");
        } else {
            Echo ("All commands read.");
            return;
        }
    }

    Echo ("Not reading further commands.");
}


private void ObservePhases()
{
    //The actual phase is defined by the weight-bearing leg
    //This is whichever drive one has the angle closest to zero
    //-(potentially untrue if there is roll, pitch, or uneven ground, but good enough)

    for (uint i=0; i<2; i++) {  //Left-Right
        float
            phaseOffset = 0.0f;
        float
            sidePhase = float.NaN,
            sideAbsMin = float.PositiveInfinity;

        for (uint ii=0; ii<phaseCount; ii++) {  //Column
            float
                columnPhase = float.NaN,
                columnAbsMin = float.PositiveInfinity;

            for (uint iii=0; iii<driveIdCount; iii++) { //Id
                uint
                    indexDrive = IndexDrive(i,ii,iii);
                float
                    angle = drives[indexDrive].TrueAngle,
                    phase = NormaliseRadians_2Pi(angle +phaseOffset),
                    abs = Math.Abs( NormaliseRadians_Pi(angle) );

                phaseDrives[indexDrive] = phase;

                if (abs < columnAbsMin) {
                    columnAbsMin = abs;
                    columnPhase = phase;
                }
            }

            phaseColumns[ (i*phaseCount) +ii ] = columnPhase;

            if (columnAbsMin < sideAbsMin) {
                sideAbsMin = columnAbsMin;
                sidePhase = columnPhase;
            }

            phaseOffset += phaseSize;
        }

        phaseSides[i] = sidePhase;
    }
}

private void SetupDrives(uint side, float phaseTarget, float elapsedSeconds_reciprocal, float rpmSide){
    for (uint ii=0; ii<phaseCount; ii++) {  //column
        for (uint iii=0; iii<driveIdCount; iii++) { //id
            uint indexDrive = IndexDrive(side, ii, iii);
            DriveConfig drive = drives[indexDrive];

            //calculate target angle based on phase
            float //0..2pi
                target = NormaliseRadians_2Pi (phaseTarget -(ii * phaseSize));
            float //-pi..pi
                error = NormaliseRadians_Pi (NormaliseRadians_Pi(drives[indexDrive].TrueAngle) -target);

            float
                correction = status.driveControllers[indexDrive].Update(error, elapsedSeconds_reciprocal);
            float
                velocity = MyMath.Clamp (rpmSide + correction, 0.0f, rpmMax);

            MotorStator.SetVelocity (drive.drive,
                drive.inverted ? -velocity : velocity);
        }
    }
}

private void Update()
{
    double elapsedSeconds = Runtime.TimeSinceLastRun.TotalSeconds;
    //precalculate reciprocal for optimisation
    //-handle special case of time=0
    float elapsedSeconds_reciprocal = (elapsedSeconds == 0.0) ? 0.0f : 1.0f / (float)elapsedSeconds;

    Echo ("dt = " +elapsedSeconds.ToString() );

//  for (uint i=0; i<2; i++) {
//      for (uint ii=0; ii<phaseCount; ii++) {
//          for (uint iii=0; iii<driveIdCount; iii++) {
//              DriveConfig config = drives[IndexDrive(i, ii, iii)];
//
//              Echo (config.drive.CustomName +" :");
//              Echo (" inverted = " +config.inverted.ToString() );
//              Echo (" offset = " +MathHelper.ToDegrees(config.offset).ToString("F1") +'\u00B0');
//              //Echo (" angle = " + MathHelper.ToDegrees(config.drive.TrueAngle).ToString("F1") +'\u00B0');
//          }
//      }
//  }
    ObservePhases();

    //Update PDs and adjust Drives
    float   //phases, 0..2pi
        phaseTargetLeft,
        phaseTargetRight;

    //if possible, adjust targets to synchronise left and right sides
    if (status.rpmLeft == status.rpmRight) {
        Echo ("synchronising sides...");
        float phaseTargetShared =
                //AngleAverage_2Pi(phaseSides[driveLeft], phaseSides[driveRight]);
                AngleAverage_2Pi(phaseColumns[0], phaseColumns[phaseCount]);
//      Echo ("TARGET: " +MathHelper.ToDegrees(phaseTargetShared).ToString("F1") +'\u00B0');
        phaseTargetLeft = phaseTargetShared;
        phaseTargetRight = phaseTargetShared;
    } else {
        phaseTargetLeft = phaseSides[driveLeft];
        phaseTargetRight = phaseSides[driveRight];
    }

    //{!}TODO adjust to synchronise within sides, within columns

    //set up Drives
    SetupDrives(driveLeft, phaseTargetLeft, elapsedSeconds_reciprocal, status.rpmLeft);
    SetupDrives(driveRight, phaseTargetRight, elapsedSeconds_reciprocal, status.rpmRight);

    //Echo status
//  Echo ("phaseLeft: " +MathHelper.ToDegrees(phaseSides[0]).ToString("F1") +'\u00B0');
//  for (uint i=0; i<phaseCount; i++) {
//      Echo ("  column" +(i+1).ToString() +": " +MathHelper.ToDegrees(phaseColumns[i]).ToString("F1") +'\u00B0');
//      for (uint ii=0; ii<driveIdCount; ii++){
//          Echo ("    id" +(nameDesciptorDriveIds[ii]) +": " +MathHelper.ToDegrees(phaseDrives[IndexDrive(driveLeft,i,ii)]).ToString("F1") +'\u00B0');
//          Echo ("     rpm: " +drives[IndexDrive(driveLeft,i,ii)].drive.Velocity.ToString("F1") +"rpm");
//      }
//  }
//  Echo ("phaseRight: " +MathHelper.ToDegrees(phaseSides[1]).ToString("F1") +'\u00B0');
//  for (uint i=0; i<phaseCount; i++) {
//      Echo ("  column" +(i+1).ToString() +": " +MathHelper.ToDegrees(phaseColumns[phaseCount +i]).ToString("F1") +'\u00B0');
//      for (uint ii=0; ii<driveIdCount; ii++){
//          Echo ("    id" +(nameDesciptorDriveIds[ii]) +": " +MathHelper.ToDegrees(phaseDrives[IndexDrive(driveRight,i,ii)]).ToString("F1") +'\u00B0');
//          Echo ("     rpm: " +drives[IndexDrive(driveRight,i,ii)].drive.Velocity.ToString("F1") +"rpm");
//      }
//  }
//
}


private bool FindBlock<BlockType>(out BlockType block, string nameBlock, ref List<IMyTerminalBlock> temp)
    where BlockType : class, IMyTerminalBlock
{
    block = null;
    GridTerminalSystem.GetBlocksOfType<BlockType> (temp);
    for (int i=0; i<temp.Count; i++){
        if (temp[i].CustomName == nameBlock) {
            if (block == null) {
                block = (BlockType)temp[i];
            } else {
                Echo ("ERROR: duplicate name \"" +nameBlock +"\"");
                return false;
            }
        }
    }
    //verify that the block was found
    if (block == null) {
        Echo ("ERROR: block not found \"" +nameBlock +"\"");
        return false;
    }
    return true;
}

private bool ValidateBlock(IMyTerminalBlock block, bool callbackRequired=false)
{
    //check for block deletion?

    //check that we have required permissions to control the block
    if ( ! Me.HasPlayerAccess(block.OwnerId) ) {
        Echo ("ERROR: no permissions for \"" +block.CustomName +"\"");
        return false;
    }

    //check that the block has required permissions to make callbacks
    if ( callbackRequired && !block.HasPlayerAccess(Me.OwnerId) ) {
        Echo ("ERROR: no permissions on \"" +block.CustomName +"\"");
        return false;
    }

    //check that block is functional
    if (!block.IsFunctional) {
        Echo ("ERROR: non-functional block \"" +block.CustomName +"\"");
        return false;
    }

    return true;
}

private bool ValidateDrive(IMyMotorStator drive)
{
    if ( ! ValidateBlock(drive) )
        return false;

    if ( ! drive.IsAttached ){
        Echo ("ERROR: Drive not attached \"" +drive.CustomName +"\"");
        return false;
    }

    return true;
}

private bool Initialise()
{
    status.initialised = false;
    Echo ("initialising...");

    var temp = new List<IMyTerminalBlock>();

    //Discover drive rotors
    GridTerminalSystem.GetBlocksOfType<IMyMotorStator>(temp);
    for (uint i=0; i<2; i++) {  //Left-Right
        for (uint ii=0; ii<phaseCount; ii++) {  //Column
            for (uint iii=0; iii<driveIdCount; iii++) { //Id
                //Clear any existing reference
                uint indexDrive = IndexDrive(i, ii, iii);
                drives[indexDrive].drive = null;

                //Find the required Drive
                string nameBlock = NameRotorDrive(i,ii,iii);
                for (int t=0; t<temp.Count; t++) {
                    if (temp[t].CustomName == nameBlock) {
                        if (drives[indexDrive].drive == null) {
                            drives[indexDrive].drive = (IMyMotorStator)temp[t];
                        } else {
                            Echo ("ERROR: duplicate name \"" + nameBlock + "\"");
                            return false;
                        }
                    }
                }
                //Check that the Drive was found
                if (drives[indexDrive].drive == null) {
                    Echo ("ERROR: block not found \"" +nameBlock +"\"");
                    return false;
                }
                //Check that the found Drive is operable
                if ( !ValidateDrive(drives[indexDrive].drive) )
                    return false;
                if ( !drives[indexDrive].Evaluate() ) {
                    Echo ("ERROR: drive has invalid orientation \"" + nameBlock + "\"");
                    return false;
                }

            }
        }
    }

    //Discover command bus
    {
        IMyTextPanel textPanel;
        if ( !( FindBlock<IMyTextPanel>(out textPanel, nameBusCommand, ref temp)
                && ValidateBlock(textPanel, callbackRequired:false) ))
            return false;
        else
            busCmd = new CommandBus(textPanel);
    }

    status.initialised = true;
    Echo ("Initialisation completed with no errors.");
    return true;
}


private bool Validate()
{
    bool valid =
        ValidateBlock(busCmd.bus);

    for (uint i=0; i<driveCount; i++) {
        valid = valid
            & ValidateDrive(drives[i].drive);
    }

    if ( !valid ) {
        Echo ("Validation of saved blocks failed.");
    }
    return valid;
}
